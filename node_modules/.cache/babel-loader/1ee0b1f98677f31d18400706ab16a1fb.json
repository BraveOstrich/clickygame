{"ast":null,"code":"var _jsxFileName = \"/Users/steve/UTCoding/clickygame/src/App.js\";\nimport React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\"; //import Title from \"./components/Title\";\n\nimport Navbar from \"./components/Nav\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      score: 0,\n      clicked: []\n    };\n\n    this.setClicked = id => {\n      const matches = this.state.matches;\n      const clickedMatch = matches.filter(match => match.id === id);\n\n      if (clickedMatch[0].clicked) {\n        console.log(\"Best Score: \" + score);\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        }\n      } else if (correctGuesses < 11) {\n        // Set its value to true\n        clickedMatch[0].clicked = true; // increment the appropriate counter\n\n        correctGuesses++;\n        clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n        if (correctGuesses > bestScore) {\n          bestScore = correctGuesses;\n          this.setState({\n            bestScore\n          });\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      } else {\n        // Set its value to true\n        clickedMatch[0].clicked = true; // restart the guess counter\n\n        correctGuesses = 0; // Egg on the user to play again\n\n        clickMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n        bestScore = 12;\n        this.setState({\n          bestScore\n        });\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), this.state.friends.map(friend => React.createElement(CharacterCard, {\n      id: friend.id,\n      key: friend.id,\n      image: friend.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/steve/UTCoding/clickygame/src/App.js"],"names":["React","Component","CharacterCard","Wrapper","Navbar","friends","App","state","score","clicked","setClicked","id","matches","clickedMatch","filter","match","console","log","i","length","correctGuesses","clickMessage","bestScore","setState","sort","a","b","Math","random","render","map","friend","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\n//import Title from \"./components/Title\";\nimport Navbar from \"./components/Nav\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n\n  state = {\n    friends,\n    score: 0,\n    clicked: []\n  };\n  \n  setClicked = id => {\n\n    \n    \n    const matches = this.state.matches;\n\n    \n    \n    const clickedMatch = matches.filter(match => match.id === id);\n\n    if (clickedMatch[0].clicked){\n\n        console.log (\"Best Score: \" + score);\n\n        for (let i = 0 ; i < matches.length ; i++){\n            matches[i].clicked = false;\n        }\n\n    } else if (correctGuesses < 11) {\n\n        // Set its value to true\n        clickedMatch[0].clicked = true;\n\n        // increment the appropriate counter\n        correctGuesses++;\n        \n        clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n        if (correctGuesses > bestScore){\n            bestScore = correctGuesses;\n            this.setState({ bestScore });\n        }\n\n        // Shuffle the array to be rendered in a random order\n        matches.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.matches equal to the new matches array\n        this.setState({ matches });\n        this.setState({correctGuesses});\n        this.setState({clickMessage});\n    } else {\n\n        // Set its value to true\n        clickedMatch[0].clicked = true;\n\n        // restart the guess counter\n        correctGuesses = 0;\n\n        // Egg on the user to play again\n        clickMessage = \"WOW!!! You got ALL of them!!! Now, let's see if you can do it again!\";\n        bestScore = 12;\n        this.setState({ bestScore });\n        \n        for (let i = 0 ; i < matches.length ; i++){\n            matches[i].clicked = false;\n        }\n\n        // Shuffle the array to be rendered in a random order\n        matches.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.matches equal to the new matches array\n        this.setState({ matches });\n        this.setState({correctGuesses});\n        this.setState({clickMessage});\n\n    }\n};\n\n\n\n  \n\n  render() {\n    return (\n      <Wrapper className=\"wrapper\">\n        <Navbar />\n        {this.state.friends.map(friend => (\n          <CharacterCard\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}